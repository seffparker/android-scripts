#!/data/bin/bash

## Auto-stop media playback and turn off Bluetooth
## Author: Seff P
## Version: 20210107


source check-root
source /sdcard/lab/android/etc/bashrc.root
source set-dir
source set-prompt

PID_FILE=$RUN/audio-sleep.pid
STATUS=$VAR/audio-sleep.left

daemon_run () {
    termux-wake-lock
    for ((MIN=$1; MIN > 0; MIN--))
    do
        echo -n ${MIN} > ${STATUS}
        termux-notification --alert-once --ongoing --id audio-sleep \
        -t "Audio player will stop in $MIN minutes" \
        --button1 "Extend 30m" \
        --button1-action "su -c '$0 +30'"\
        --button2 "Abort" \
        --button2-action "su -c '$0 0'" 
        sleep 60
    done
    echo -n 0 > ${STATUS}
    termux-notification --content "Audio player is being stopped" \
        --ongoing --id audio-sleep \
        --button1 "Extend 30m" \
        --button1-action "su -c '$0 30'"
    CUR_VOL=$(termux-volume | awk '/music/ {getline; print $2+0}')
    for VOL in $(seq $CUR_VOL | sort -nr)
        do
        termux-volume music $VOL
        sleep 5
        done
    input keyevent 86 # stop media
    termux-volume music $CUR_VOL # restore volume
    /system/bin/svc bluetooth disable
    rm -f $PID_FILE $STATUS
    termux-notification-remove audio-sleep
    termux-wake-unlock
}

print_usage () {
    echo "USAGE:"
    echo -e "\t`basename $0` <minutes-to-sleep>"
    echo -e "\t`basename $0` +<minutes-to-extend>"
    echo -e "\t`basename $0` 0 <zero-to-abort>"
    exit 1
}

daemon_stop () {
    echo -n "Aborting audio-sleep "
    if start-stop-daemon -Ktq -p $PID_FILE
    then
        PID=$(cat $PID_FILE)
        busybox pkill -9 -P $PID &> /dev/null
        start-stop-daemon -Kq -p $PID_FILE -s 9
        termux-wake-unlock
        termux-notification-remove audio-sleep
        rm -f $STATUS $PID_FILE
        DONE
    else
        SKIP
    fi
}

daemon_start () {
    echo -ne "Setting sleep timer to $1 minutes "
    start-stop-daemon -S -m -p $PID_FILE -b $0 -- run $1
    DONE
}

case $1 in
    run)
        [[ $2 -gt 1 ]] && daemon_run $2 || print_usage
        ;;
    0)
        daemon_stop
        ;;
    +[1-9]*)
        MIN_LEFT=$(cat $STATUS 2> /dev/null)
        let MIN=${MIN_LEFT}${1}
        daemon_stop &> /dev/null
        daemon_start $MIN
        ;;
    [1-9]*)
        daemon_stop &> /dev/null
        daemon_start $1
        ;;
    *)
        print_usage
        ;;
esac