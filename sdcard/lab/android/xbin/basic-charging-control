#!/data/bin/bash

# Basic charging control and status notification
# Author: Seff P.
# Version: 20200918

source check-root
source set-dir
source $ETC/bcc.conf

chmod u+w $INPUT_SWITCH $CURR_LIMIT_FILE $CURR_BOOST_FILE

set_cycle () {
    MODE="Cycle"
    STOP_LEVEL=$CYCLE_STOP_LEVEL
    RESUME_LEVEL=$CYCLE_RESUME_LEVEL
    CURRENT_LIMIT=$CYCLE_CURRENT_LIMIT
    BUTTON1_TEXT="Supercharge 🚀"
    BUTTON1_ACTION="su -c 'pkill -l USR2 -f $0'"
    SETTLED=false
    logdate "Set to Cyclecharge mode" >> $BCC_LOG
}

set_super () {
    MODE="Super"
    STOP_LEVEL=$SUPER_STOP_LEVEL
    RESUME_LEVEL=$SUPER_RESUME_LEVEL
    CURRENT_LIMIT=$SUPER_CURRENT_LIMIT
    BUTTON1_TEXT="Cyclecharge ♻️"
    BUTTON1_ACTION="su -c 'pkill -l USR1 -f $0'"
    IS_DISABLED=true
    SETTLED=false
    logdate "Set to Supercharge mode" >> $BCC_LOG
}

hide_status () {
    SHOW_STATUS=false
    termux-notification-remove bcc
    logdate "Notification disabled for this cycle" >> $BCC_LOG
}

daemon_run () {
trap set_cycle USR1
trap set_super USR2
trap hide_status HUP

while true
    do
    LEVEL=$(cat $LEVEL_FILE)
    if grep -Eq "^Charging|Not charging" $CHARGING_STATE
        then # being charged or paused
        LINE_VOLT=$(awk '{print $1/1000000 "v"}' $LINE_VOLT_FILE)
        CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
        TEMP=$(awk '{print $1/10}' $TEMP_METER)
      
        if $INIT
            then # prepare for init
            WAS_CHARGING=true
            LEVEL_INIT=$LEVEL
            TIME_INIT=$(date +%s)
            INIT=false
            SETTLED=false
            STATUS_TEXT="is initializing"
            logdate "${MODE}charging initialized at $LEVEL% / ${TEMP}°C" >> $BCC_LOG
            
        elif $IS_PAUSED
            then # pause charging
            echo $PAUSE > $CURR_LIMIT_FILE
            if [[ $TEMP -le $RESUME_TEMP ]]
                then # resume charging
                logdate "Charging resumed at ${RESUME_TEMP}°C" >> $BCC_LOG
                IS_PAUSED=false
            fi
    
        elif ! $SETTLED
            then # calculate max current
            if grep -wq "^${CURR_MAX}$" $CURR_MAX_FILE
                then
                echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
                sleep $SLEEP_TINY
                CURR_UNLIMIT_TEXT=$(echo $CURR_MAX | awk '{printf "(max. "; if ($1 >= 1000000) print $NF/1000000 "A)"; else print $1/1000 "mA)"}')
                CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
                logdate "Charging settled at $LINE_VOLT / $CURR $CURR_UNLIMIT_TEXT" >> $BCC_LOG
                STATUS_TEXT="settled at $LINE_VOLT $CURR_UNLIMIT_TEXT"
                SETTLED=true
                unset CURR_MAX
            else
                echo $MAX > $CURR_LIMIT_FILE
                echo $BOOST > $CURR_BOOST_FILE
                sleep $SLEEP_TINY
                CURR_MAX=$(cat $CURR_MAX_FILE)
            fi
            
        else
            # adjust current
            STATUS_TEXT="at $LINE_VOLT / $CURR $CURR_UNLIMIT_TEXT"
            echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
        fi
        
        if $SHOW_STATUS
            then # show status notification
            BATT_VOLT=$(awk '{printf "%0.2f\n",$1/1000000}' $BATT_VOLT_FILE)
            termux-notification --alert-once \
            --ongoing -i bcc \
            -t "${MODE}charging $STATUS_TEXT" \
            -c "Battery is ${LEVEL}% charged to ${BATT_VOLT}v and is at ${TEMP}°C" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}" \
            --button2 "Hide Status" \
            --button2-action "su  -c 'pkill -l HUP -f $0'"
        fi
        
        if [[ $TEMP -ge $PAUSE_TEMP ]] && ! $IS_PAUSED
            then # prepare to pause charging
            IS_PAUSED=true
            logdate "Charging paused at ${TEMP}°C, resumes at ${RESUME_TEMP}°C. Level ${LEVEL}%" >> $BCC_LOG
            STATUS_TEXT="paused at ${PAUSE_TEMP}°C, resumes at ${RESUME_TEMP}°C"
        fi      
       
        if [[ $LEVEL -ge $STOP_LEVEL ]]
            then # stop charging
            echo $OFF > $INPUT_SWITCH
            IS_DISABLED=true
            SHOW_WARNING=false
            sleep $SLEEP_TINY
        else
            # connected, charging
            sleep $SLEEP_SHORT
        fi
        
    elif $WAS_CHARGING
        then # charging just stopped
        LEVEL_UP=$(($LEVEL-$LEVEL_INIT))
        TIME=$(date +%s)
        TIME_SPENT=$(($TIME-$TIME_INIT))
        TIME_SPENT=$(date -ud "@$TIME_SPENT" +'%Hh:%Mm')
        if $IS_DISABLED
            then
            TEXT="Charging is limited to ${STOP_LEVEL}%"
            BUTTON_TEXT="$BUTTON1_TEXT"
            BUTTON_ACTION="$BUTTON1_ACTION"
            logdate "Charging limited to $LEVEL%. Temp. ${TEMP}°C" >> $BCC_LOG
            set_cycle
        else
            unset BUTTON_TEXT BUTTON_ACTION
            TEXT="Charging interrupted at $LEVEL%"
            logdate "Charging interrupted at $LEVEL%. Temp. ${TEMP}°C" >> $BCC_LOG
        fi
        termux-notification -i bcc \
            -t "Charged additional ${LEVEL_UP}% in $TIME_SPENT" \
            -c "$TEXT" \
            --button1 "${BUTTON_TEXT}" \
            --button1-action "${BUTTON_ACTION}"
        INIT=true
        SHOW_STATUS=true
        WAS_CHARGING=false
        IS_PAUSED=false
        
    elif $IS_DISABLED
        then # above resume level. Disabled, not charging
        logdate "Level $LEVEL% is above $RESUME_LEVEL%. Disabled, Not charging" >> $BCC_LOG
        STATE=$(cat $INPUT_STATE)
        if [[ $STATE -eq $ONLINE ]] && [[ $LEVEL -ne 100 ]] && $SHOW_WARNING
            then # charger just connected, show warning
            vibrate 2
            TEXT="Charging is suspended above ${RESUME_LEVEL}%"
            termux-notification -i bcc \
            -t "$TEXT" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}"
            SHOW_WARNING=false
            unset TEXT
        elif [[ $STATE -eq $OFFLINE ]] && ! $SHOW_WARNING
            then # charger just removed
            SHOW_WARNING=true
        fi
        
        while grep -qw $STATE $INPUT_STATE && [[ $LEVEL -ge $RESUME_LEVEL ]]
            do sleep $SLEEP_SHORT
            LEVEL=$(cat $LEVEL_FILE)
        done
        
        if [[ $LEVEL -lt $RESUME_LEVEL ]]
            then # re-enable charging
            echo $ON > $INPUT_SWITCH
            IS_DISABLED=false
            logdate "Charging re-enabled at $LEVEL%" >> $BCC_LOG
            sleep $SLEEP_TINY
        fi
        
    else
        # not connected, not charging
        logdate "Level is $LEVEL%. Not connected" >> $BCC_LOG
        while grep -qw $OFFLINE $INPUT_STATE
                do sleep $SLEEP_SHORT
        done
    fi
done
}

daemon_start () {
    echo -n "Starting Basic Charging Control "
    if kill-process $0 $PID_FILE check-only
        then
        PID=$(cat $PID_FILE)
        echo "(PID: $PID) $(SKIP)"
    else
        logdate "Starting Basic Charging Control" > $BCC_LOG
        echo $ON > $INPUT_SWITCH
        set_cycle
        daemon_run &> /dev/null &
        PID=$!
        echo $PID > $PID_FILE
        echo "(PID: $PID) $(DONE)"
    fi
}

daemon_status () {
    echo -n "Basic Charging Control is "
    if kill-process $0 $PID_FILE check-only
        then
        PID=$(cat $PID_FILE)
        echo "running (PID: $PID) $(OK)"
    else
        echo "not running $(FAIL)"
    fi
}

daemon_stop () {
    PID=$(cat $PID_FILE 2> /dev/null)
    echo -n "Stopping Basic Charging Control "
    if kill-process $0 $PID_FILE
        then
        echo $ON > $INPUT_SWITCH
        echo "(PID: $PID) $(DONE)"
    else
        SKIP
    fi
}

# main ()

case $1 in
    start)
        daemon_start
        ;;
    status)
        daemon_status
        ;;
    restart)
        daemon_stop
        daemon_start
        ;;
    stop)
        daemon_stop
        ;;
    *)
        echo "Usage: start | status | restart | stop"
        ;;
esac

