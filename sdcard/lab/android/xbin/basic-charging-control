#!/data/bin/bash

# Basic charging control and status notification
# Author: Seff P.
# Version: 3.0.0 20210228

# daemon variables
APP_NAME="Basic Charging Control"
PID_FILE=$RUN/bcc.pid
BCC_LOG=$LOG/bcc.log
BUCKET="$VAR/status-widget/bucket/bcc"

# startup variable
INIT=true
WAS_CHARGING=false
IS_DISABLED=false
IS_PAUSED=false
SHOW_STATUS=true
SHOW_WARNING=true
SLEEP_TINY=1
SLEEP_SHORT=3

source check-root
source set-dir
source $ETC/bcc.device.conf
source $ETC/bcc.user.conf

chmod u+w $INPUT_SWITCH $CURR_LIMIT_FILE $CURR_BOOST_FILE

set_cycle () {
    MODE="Cycle"
    STOP_LEVEL=$CYCLE_STOP_LEVEL
    RESUME_LEVEL=$CYCLE_RESUME_LEVEL
    CURRENT_LIMIT=$CYCLE_CURRENT_LIMIT
    BUTTON1_TEXT="Supercharge 🚀"
    BUTTON1_ACTION="su -c '/system/bin/pkill -o -l USR2 -f $0'"
    SETTLED=false
    echo "Set to Cyclecharge mode"
}

set_super () {
    MODE="Super"
    STOP_LEVEL=$SUPER_STOP_LEVEL
    RESUME_LEVEL=$SUPER_RESUME_LEVEL
    CURRENT_LIMIT=$SUPER_CURRENT_LIMIT
    BUTTON1_TEXT="Cyclecharge ♻️"
    BUTTON1_ACTION="su -c '/system/bin/pkill -o -l USR1 -f $0'"
    SETTLED=false
    echo "Set to Supercharge mode"
}

hide_status () {
    SHOW_STATUS=false
    termux-notification-remove bcc
    echo "Notification disabled for this cycle"
}

daemon_run () {
trap set_cycle USR1
trap set_super USR2
trap hide_status HUP
exec &> >(logdate | tee "$BCC_LOG")
echo "Starting ${APP_NAME}"
set_cycle
echo $ON > $INPUT_SWITCH

while true
    do
    LEVEL=$(cat $LEVEL_FILE)
    if grep -Eq "^Charging|Not charging" $CHARGING_STATE
        then # being charged or paused
        LINE_VOLT=$(awk '{print $1/1000000 "v"}' $LINE_VOLT_FILE)
        CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
        TEMP=$(awk '{print $1/10}' $TEMP_METER)
      
        if $INIT
            then # prepare for init
            WAS_CHARGING=true
            LEVEL_INIT=$LEVEL
            TIME_INIT=$(date +%s)
            INIT=false
            SETTLED=false
            STATUS_TEXT="is initializing"
            echo "${MODE}charging initialized at $LEVEL% / ${TEMP}°C"
            
        elif $IS_PAUSED
            then # pause charging
            echo $PAUSE > $CURR_LIMIT_FILE
            if [[ $TEMP -le $RESUME_TEMP ]]
                then # resume charging
                echo "Charging resumed at ${RESUME_TEMP}°C"
                IS_PAUSED=false
            fi
    
        elif ! $SETTLED
            then # calculate max current
            if grep -wq "^${CURR_MAX}$" $CURR_MAX_FILE
                then
                chmod +w $CURR_LIMIT_FILE
                echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
                sleep $SLEEP_TINY
                CURR_UNLIMIT_TEXT=$(echo $CURR_MAX | awk '{printf "(max. "; if ($1 >= 1000000) print $NF/1000000 "A)"; else print $1/1000 "mA)"}')
                CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
                echo "Charging settled at $LINE_VOLT / $CURR $CURR_UNLIMIT_TEXT"
                STATUS_TEXT="settled at $LINE_VOLT $CURR_UNLIMIT_TEXT"
                echo "${MODE}charging at $LINE_VOLT / $CURR $CURR_UNLIMIT_TEXT" > ${BUCKET}
                SETTLED=true
                unset CURR_MAX
            else
                chmod +w $CURR_LIMIT_FILE
                echo $BOOST > $CURR_BOOST_FILE
                echo $MAX > $CURR_LIMIT_FILE
                chmod -w $CURR_LIMIT_FILE
                sleep $SLEEP_TINY
                CURR_MAX=$(cat $CURR_MAX_FILE)
                CHARGER=$(cat $CHARGER_FILE)
                STATUS_TEXT="is initialized by $CHARGER"
                echo "Settling, charger type is $CHARGER"
            fi
        else
            # adjust current
            echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
            STATUS_TEXT="at $LINE_VOLT / $CURR $CURR_UNLIMIT_TEXT"
        fi
        if $SHOW_STATUS && grep -qvw 0 "$BRIGHTNESS_FILE"
            then # show status notification
            BATT_VOLT=$(awk '{printf "%0.2f\n",$1/1000000}' $BATT_VOLT_FILE)
            timeout 2 termux-notification --alert-once \
            --ongoing -i bcc \
            -t "${MODE}charging $STATUS_TEXT" \
            -c "Battery is ${LEVEL}% charged to ${BATT_VOLT}v and is at ${TEMP}°C" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}" \
            --button2 "Hide Status" \
            --button2-action "su  -c '/system/bin/pkill -o -l HUP -f $0'"
        fi
        
        if [[ $TEMP -ge $PAUSE_TEMP ]] && ! $IS_PAUSED
            then # prepare to pause charging
            IS_PAUSED=true
            echo "Charging paused at ${TEMP}°C, resumes at ${RESUME_TEMP}°C. Level ${LEVEL}%"
            STATUS_TEXT="paused at ${PAUSE_TEMP}°C, resumes at ${RESUME_TEMP}°C"
        fi      
       
        if [[ $LEVEL -ge $STOP_LEVEL ]]
            then # stop charging
            echo $OFF > $INPUT_SWITCH
            IS_DISABLED=true
            SHOW_WARNING=false
            sleep $SLEEP_TINY
        else
            # connected, charging
            sleep $SLEEP_SHORT
        fi
        
    elif $WAS_CHARGING
        then # charging just stopped
        LEVEL_UP=$(($LEVEL-$LEVEL_INIT))
        TIME=$(date +%s)
        TIME_SPENT=$(($TIME-$TIME_INIT))
        TIME_SPENT=$(date -ud "@$TIME_SPENT" +'%Hh:%Mm')
        if $IS_DISABLED
            then
            BUTTON_TEXT="$BUTTON1_TEXT"
            BUTTON_ACTION="$BUTTON1_ACTION"
            TEXT="Charging is limited to ${STOP_LEVEL}%"
            END="completed"
            echo "$TEXT. Temp. ${TEMP}°C"
            set_cycle
        else
            unset BUTTON_TEXT BUTTON_ACTION
            TEXT="Charging interrupted at $LEVEL%"
            END="interrupted"
            echo "$TEXT. Temp. ${TEMP}°C"
        fi
        echo "Charging $END at $(date +"%l:%M %p") with +$LEVEL_UP% to $LEVEL%" > ${BUCKET}
        termux-notification -i bcc \
            -t "Charged additional ${LEVEL_UP}% in $TIME_SPENT" \
            -c "$TEXT" \
            --button1 "${BUTTON_TEXT}" \
            --button1-action "${BUTTON_ACTION}"
        INIT=true
        SHOW_STATUS=true
        WAS_CHARGING=false
        IS_PAUSED=false
        
    elif $IS_DISABLED
        then # above resume level. Disabled, not charging
        STATE=$(cat $INPUT_STATE)
        if [[ $STATE -eq $ONLINE ]] && [[ $LEVEL -ne 100 ]] && $SHOW_WARNING
            then # charger just connected, show warning
            echo "Level $LEVEL% is above $RESUME_LEVEL%. Disabled, Not charging"
            vibrate 2
            TEXT="Charging is suspended above ${RESUME_LEVEL}%"
            termux-notification -i bcc \
            -t "$TEXT" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}"
            SHOW_WARNING=false
            unset TEXT
        elif [[ $STATE -eq $OFFLINE ]] && ! $SHOW_WARNING
            then # charger just removed
            SHOW_WARNING=true
        fi
        
        while grep -qw $STATE $INPUT_STATE && [[ $LEVEL -ge $RESUME_LEVEL ]]
            do # charging is disabled
            sleep $SLEEP_SHORT
            inotifywait -qq -e close $INPUT_STATE
            LEVEL=$(cat $LEVEL_FILE)
        done
        
        if [[ $LEVEL -lt $RESUME_LEVEL ]]
            then # re-enable charging
            echo $ON > $INPUT_SWITCH
            IS_DISABLED=false
            echo "Charging re-enabled at $LEVEL%"
            sleep $SLEEP_TINY
        fi
        
    else
        # not connected, not charging
        echo "Level is $LEVEL%. Not connected"
        while grep -qw $OFFLINE $INPUT_STATE
            do sleep $SLEEP_SHORT
            inotifywait -qq -e close $INPUT_STATE
        done
    fi
done
}

daemon_start () {
    echo -n "Starting ${APP_NAME} "
    if daemon -t -p $PID_FILE -c $0
        then
        PID=$(cat $PID_FILE)
        echo "(PID: $PID) $(OK)"
    elif daemon -s -p $PID_FILE -c $0 -a run
        then
        PID=$(cat $PID_FILE)
        echo "(PID: $PID) $(DONE)"
    else
        FAIL
        CODE=1
    fi
}

daemon_status () {
    echo -n "${APP_NAME} is "
    if daemon -t -p $PID_FILE -c $0
        then
        PID=$(cat $PID_FILE)
        echo "running (PID: $PID) $(OK)"
    else
        echo "not running $(FAIL)"
        CODE=1
    fi
}

daemon_stop () {
    PID=$(cat $PID_FILE 2> /dev/null)
    echo -n "Stopping ${APP_NAME} "
    termux-notification-remove bcc
    rm -f $BUCKET
    if daemon -k -p $PID_FILE -c $0
        then
        echo $ON > $INPUT_SWITCH
        rm -f $PID_FILE
        echo "(PID: $PID) $(DONE)"
    else
        OK
    fi
}

# main ()

case $1 in
    start)
        daemon_start
        ;;
    run)
        daemon_run
        ;;
    status)
        daemon_status
        ;;
    restart)
        daemon_stop
        daemon_start
        ;;
    stop)
        daemon_stop
        ;;
    *)
        echo "Usage: start | status | restart | stop"
        CODE=2
        ;;
esac

exit $CODE