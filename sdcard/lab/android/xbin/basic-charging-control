#!/data/bin/bash

# Basic charging control and status notification
# Author: Seff P.
# Version: 5.0.2 20210603

# daemon variables
APP_NAME="Basic Charging Control"
APP_ID="bcc"
PID_FILE=$RUN/${APP_ID}.pid
BCC_LOG=$LOG/${APP_ID}.log
BUCKET="$VAR/status-widget/bucket/${APP_ID}"

# startup variable
INIT=true
WAS_CHARGING=false
IS_DISABLED=false
IS_PAUSED=false
SHOW_STATUS=true
SHOW_WARNING=true
SLEEP_TINY=1
SLEEP_SHORT=3
STEP=1

source check-root
source set-dir
source $ETC/${APP_ID}.device.conf
source $ETC/${APP_ID}.user.conf

set_cycle () {
    echo "Setting to Cyclecharge mode"
    MODE="Cycle"
    MAX_LIMIT=${CYCLE_MAX_LIMIT}
    STOP_LEVEL=$CYCLE_STOP_LEVEL
    LIMIT_LEVEL=${CYCLE_LIMIT_LEVEL}
    RESUME_LEVEL=$CYCLE_RESUME_LEVEL
    LIMIT_TEMP=$CYCLE_LIMIT_TEMP
    PAUSE_TEMP=$CYCLE_PAUSE_TEMP
    RESUME_TEMP=$CYCLE_RESUME_TEMP
    BUTTON1_TEXT="Supercharge 🚀"
    BUTTON1_ACTION="su -c '/system/bin/pkill -o -l USR2 -f $0'"
    SETTLED=false
    init_current_vector
}

set_super () {
    echo "Setting to Supercharge mode"
    MODE="Super"
    MAX_LIMIT=${SUPER_MAX_LIMIT}
    STOP_LEVEL=$SUPER_STOP_LEVEL
    LIMIT_LEVEL=${SUPER_LIMIT_LEVEL}
    RESUME_LEVEL=$SUPER_RESUME_LEVEL
    LIMIT_TEMP=$SUPER_LIMIT_TEMP
    PAUSE_TEMP=$SUPER_PAUSE_TEMP
    RESUME_TEMP=$SUPER_RESUME_TEMP
    BUTTON1_TEXT="Cyclecharge ♻️"
    BUTTON1_ACTION="su -c '/system/bin/pkill -o -l USR1 -f $0'"
    SETTLED=false
    init_current_vector
}

hide_status () {
    SHOW_STATUS=false
    termux-notification-remove ${APP_ID}
    echo "Notification disabled for this cycle"
}

init_current_vector () {
    unset TEMP_VECTOR s 
    let STEPS=${PAUSE_TEMP}-${LIMIT_TEMP}+1
    [[ $STEPS -gt 0 ]] && let STEP=(${PAUSE}-${MAX_LIMIT})*100/${STEPS}
    for t in $(seq ${LIMIT_TEMP} ${PAUSE_TEMP})
        do let s+=1
        let TEMP_VECTOR[${t}]=${MAX_LIMIT}+${STEP}*${s}/100
        done
    unset LEVEL_VECTOR s
    let STEPS=${STOP_LEVEL}-${LIMIT_LEVEL}+1
    [[ $STEPS -gt 0 ]] && let STEP=(${PAUSE}-${MAX_LIMIT})*100/${STEPS}
    for t in $(seq ${LIMIT_LEVEL} ${STOP_LEVEL})
        do let s+=1
        let LEVEL_VECTOR[${t}]=${MAX_LIMIT}+${STEP}*${s}/100
        done
    echo temp_index=${!TEMP_VECTOR[*]}
    echo temp_vector=${TEMP_VECTOR[*]}
    echo level_index=${!LEVEL_VECTOR[*]}
    echo level_vector=${LEVEL_VECTOR[*]}
}

daemon_run () {
trap set_cycle USR1
trap set_super USR2
trap hide_status HUP
exec &> >(logdate | tee "$BCC_LOG")
echo "Starting ${APP_NAME}"
chmod u+w $INPUT_SWITCH $CURR_LIMIT_FILE
echo $ON > $INPUT_SWITCH
CAPACITY=$(cat $CAPACITY_FILE)
set_cycle
while true
    do
    LEVEL=$(cat $LEVEL_FILE)
    if grep -Eq "^Charging|Not charging" $CHARGING_STATE
        then # being charged or paused
        LINE_VOLT=$(awk '{print $1/1000000 "v"}' $LINE_VOLT_FILE)
        CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
        TEMP=$(awk '{print $1/10}' $TEMP_METER)
      
        if $INIT
            then # prepare for init
            WAS_CHARGING=true
            LEVEL_INIT=$LEVEL
            TIME_INIT=$(date +%s)
            INIT=false
            SETTLED=false
            CURRENT_LIMIT=$MAX_LIMIT
            ICON="power"
            STATUS_TEXT="is initializing"
            echo "${MODE}charging initialized at $LEVEL% / ${TEMP}°C"
            
        elif $IS_PAUSED
            then # pause charging
            echo $PAUSE > $CURR_LIMIT_FILE
            if [[ $TEMP -le $RESUME_TEMP ]]
                then # resume charging
                echo "Charging resumed at ${RESUME_TEMP}°C"
                IS_PAUSED=false
                ICON="power"
            fi
    
        elif ! $SETTLED
            then # calculate max current
            CURR_PREV=${CURR_NOW:=0}
            CURR_NOW=$(cat $CURR_MAX_FILE)
            if [[ "$CURR_NOW" == "$CURR_MAX" ]]
                then
                echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
                sleep $SLEEP_TINY
                CURR_MAX_TEXT=$(echo $CURR_MAX | awk '{printf "(max. "; if ($1 >= 1000000) print $NF/1000000 "A)"; else print $1/1000 "mA)"}')
                CURR=$(awk '{if ($1 >= 1000000) print $NF/1000000 "A"; else print $1/1000 "mA"}' $CURR_NOW_FILE)
                STATUS_TEXT="settled at $LINE_VOLT using ${CHARGER}"
                echo "${MODE}charging ${STATUS_TEXT} $CURR_MAX_TEXT"
                echo "${MODE}charging at $LINE_VOLT using ${CHARGER} $CURR_MAX_TEXT" > ${BUCKET}
                SETTLED=true
                unset CURR_NOW CURR_MAX
            else
                echo $MAX > $CURR_LIMIT_FILE
                sleep $SLEEP_TINY
                CURR_MAX=$(($CURR_NOW > $CURR_PREV ? $CURR_NOW : $CURR_PREV))
                echo prev=$CURR_PREV now=$CURR_NOW max=$CURR_MAX
                CHARGER=$(cat $CHARGER_FILE)
                STATUS_TEXT="is settling as $CHARGER"
            fi
        else
            # adjust current by temp or level
            if [[ ${TEMP_VECTOR[$TEMP]:=$MAX_LIMIT} -gt ${LEVEL_VECTOR[$LEVEL]:=$MAX_LIMIT} ]]
                then
                CURRENT_LIMIT=${TEMP_VECTOR[$TEMP]}
            else
                CURRENT_LIMIT=${LEVEL_VECTOR[$LEVEL]:=$MAX_LIMIT}
            fi
            echo $CURRENT_LIMIT > $CURR_LIMIT_FILE
            STATUS_TEXT="at $LINE_VOLT / ${CURR} ${CURR_MAX_TEXT}, Limit: ${CURRENT_LIMIT}"
        fi
        if $SHOW_STATUS && grep -qvw 0 "$BRIGHTNESS_FILE"
            then # show status notification
            BATT_VOLT=$(awk '{printf "%0.2f\n",$1/1000000}' $BATT_VOLT_FILE)
            timeout 2 termux-notification --alert-once \
            --ongoing -i ${APP_ID} \
            -t "${MODE}charging $STATUS_TEXT" \
            -c "Battery is ${LEVEL}% charged to ${BATT_VOLT}v and is at ${TEMP}°C" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}" \
            --button2 "Hide Status" \
            --button2-action "su  -c '/system/bin/pkill -o -l HUP -f $0'" \
            --icon $ICON
        fi
        
        if [[ $TEMP -ge $PAUSE_TEMP ]] && ! $IS_PAUSED
            then # prepare to pause charging
            IS_PAUSED=true
            echo "Charging paused at ${TEMP}°C, resumes at ${RESUME_TEMP}°C. Level ${LEVEL}%"
            STATUS_TEXT="paused at ${PAUSE_TEMP}°C, resumes at ${RESUME_TEMP}°C"
            ICON="pause"
        fi      
       
        if [[ $LEVEL -ge $STOP_LEVEL ]]
            then # stop charging
            echo $OFF > $INPUT_SWITCH
            IS_DISABLED=true
            SHOW_WARNING=false
            sleep $SLEEP_TINY
        else
            # connected, charging
            sleep $SLEEP_SHORT
        fi
        
    elif $WAS_CHARGING
        then # charging just stopped
        LEVEL_UP=$(($LEVEL-$LEVEL_INIT))
        TIME_NOW=$(date +%s)
        TIME_SPENT=$(($TIME_NOW-$TIME_INIT))
        DURATION=$(date -ud "@$TIME_SPENT" +'%Hh:%Mm')
        let RATE=($CAPACITY * $LEVEL_UP / $TIME_SPENT / 1666)
        RATE_TEXT="$RATE mAh/min."
        if $IS_DISABLED
            then
            BUTTON_TEXT="$BUTTON1_TEXT"
            BUTTON_ACTION="$BUTTON1_ACTION"
            END_TEXT="Charging is limited to ${STOP_LEVEL}%"
            END="completed"
            ICON="done"
            set_cycle
        else
            unset BUTTON_TEXT BUTTON_ACTION
            END_TEXT="Charging interrupted at $LEVEL%"
            END="interrupted"
            ICON="cancel"
        fi
        echo "${END_TEXT}, ${RATE_TEXT}, Temp. ${TEMP}°C"
        echo "Charging $END at $(date +"%l:%M %p") with +$LEVEL_UP% to $LEVEL%" > ${BUCKET}
        termux-notification -i ${APP_ID} \
            -t "Charged additional ${LEVEL_UP}% in $DURATION, ${RATE_TEXT}" \
            -c "$END_TEXT" \
            --button1 "${BUTTON_TEXT}" \
            --button1-action "${BUTTON_ACTION}" \
            --icon $ICON
        INIT=true
        SHOW_STATUS=true
        WAS_CHARGING=false
        IS_PAUSED=false
        
    elif $IS_DISABLED
        then # above resume level. Disabled, not charging
        STATE=$(cat $INPUT_STATE)
        if [[ $STATE -eq $ONLINE ]] && [[ $LEVEL -ne 100 ]] && $SHOW_WARNING
            then # charger just connected, show warning
            echo "Level $LEVEL% is above $RESUME_LEVEL%. Disabled, Not charging"
            vibrate 2
            TEXT="Charging is suspended above ${RESUME_LEVEL}%"
            termux-notification -i ${APP_ID} \
            -t "$TEXT" \
            --button1 "${BUTTON1_TEXT}" \
            --button1-action "${BUTTON1_ACTION}" \
            --icon block
            SHOW_WARNING=false
            unset TEXT
        elif [[ $STATE -eq $OFFLINE ]] && ! $SHOW_WARNING
            then # charger just removed
            SHOW_WARNING=true
        fi
        
        while grep -qw $STATE $INPUT_STATE && [[ $LEVEL -ge $RESUME_LEVEL ]]
            do # charging is disabled
            sleep $SLEEP_SHORT
            inotifywait -qq -e close $INPUT_STATE
            LEVEL=$(cat $LEVEL_FILE)
        done
        
        if [[ $LEVEL -lt $RESUME_LEVEL ]]
            then # re-enable charging
            echo $ON > $INPUT_SWITCH
            IS_DISABLED=false
            echo "Charging re-enabled at $LEVEL%"
            sleep $SLEEP_TINY
        fi
        
    else
        # not connected, not charging
        echo "Level is $LEVEL%. Not connected"
        while grep -qw $OFFLINE $INPUT_STATE
            do sleep $SLEEP_SHORT
            inotifywait -qq -e close $INPUT_STATE
        done
    fi
done
}

daemon_start () {
    echo -n "Starting ${APP_NAME} "
    if daemon -t -p $PID_FILE -c $0
        then
        PID=$(cat $PID_FILE)
        echo "(PID: $PID) $(OK)"
    elif daemon -s -p $PID_FILE -c $0 -a run
        then
        PID=$(cat $PID_FILE)
        echo "(PID: $PID) $(DONE)"
    else
        FAIL
        CODE=1
    fi
}

daemon_status () {
    echo -n "${APP_NAME} is "
    if daemon -t -p $PID_FILE -c $0
        then
        PID=$(cat $PID_FILE)
        echo "running (PID: $PID) $(OK)"
    else
        echo "not running $(FAIL)"
        CODE=1
    fi
}

daemon_stop () {
    PID=$(cat $PID_FILE 2> /dev/null)
    echo -n "Stopping ${APP_NAME} "
    termux-notification-remove ${APP_ID}
    rm -f $BUCKET
    echo $ON > $INPUT_SWITCH
    if daemon -k -p $PID_FILE -c $0
        then
        rm -f $PID_FILE
        echo "(PID: $PID) $(DONE)"
    else
        OK
    fi
}

# main ()

case $1 in
    start)
        daemon_start
        ;;
    run)
        daemon_run
        ;;
    status)
        daemon_status
        ;;
    restart)
        daemon_stop
        daemon_start
        ;;
    stop)
        daemon_stop
        ;;
    *)
        echo "Usage: start | status | restart | stop"
        CODE=2
        ;;
esac

exit $CODE