#!/data/bin/bash

## Manage adblock via /etc/hosts
## Author: Seff P
## Version: 3.2.0 20210306

source check-root
source set-dir
source set-prompt

HOSTS_URL="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
STRING="StevenBlack"
SYS_HOSTS="/data/adb/modules/batmobile-mods/system/etc/hosts"
UPDATED=false
CURL="/system/bin/curl"
BUCKET="${VAR}/status-widget/bucket/adblock"
HOSTSD="$ETC/hosts.d"
HOSTSV="$VAR/adblock"

is_enabled () {
    if head -10 $SYS_HOSTS | grep -q ${STRING}
        then return 0
    else
        echo "Adblock is disabled $(ABORT)"
        return 1
    fi
}

enable_adblock () {
    echo -n "Enabling Adblock "
    if ! is_enabled &> /dev/null
    then
        cat $HOSTSD/hosts.final > $SYS_HOSTS
        DONE
    else
        OK
    fi
}
  
disable_adblock () {
    echo -n "Disabling Adblock "
    if is_enabled &> /dev/null
    then
        cat $HOSTSD/hosts.disabled > $SYS_HOSTS
        DONE
    else
        OK
    fi
}

check () {
    echo -n "Checking for Adblock update "
    CUR_BYTES=$(cat ${HOSTSV}/hosts.comm_bytes)
    NEW_BYTES=$($CURL -Is --insecure --connect-timeout 5 ${HOSTS_URL}  | busybox awk 'BEGIN{IGNORECASE=1} /Content-Length/ {printf $2}')
    if [[ "$CUR_BYTES" == "$NEW_BYTES" ]]
        then OK
        date > ${HOSTSV}/adblock-update.last_checked
        return 2
    elif [ -z "$NEW_BYTES" ]
        then FAIL
        return 1
    else
        date > ${HOSTSV}/adblock-update.last_checked
        UPDATED
    fi
}
  
download () {
    echo -ne "Downloading update "
    PREV_RECORDS=$(cat ${HOSTSV}/hosts.comm_records)
    if $CURL --insecure -s ${HOSTS_URL} -o $HOSTSD/hosts.comm.tmp
    then
        mv -f $HOSTSD/hosts.comm.tmp $HOSTSD/hosts.comm
        echo -n $NEW_BYTES > ${HOSTSV}/hosts.comm_bytes
        CUR_RECORDS=$(grep -c ^0 $HOSTSD/hosts.comm)
        echo $CUR_RECORDS > ${HOSTSV}/hosts.comm_records
        NEW_RECORDS=$(($CUR_RECORDS - $PREV_RECORDS))
        echo -e "Database version: $(grep  "# Date:" $HOSTSD/hosts.comm | cut -d' ' -f3-5)\nNew records: $NEW_RECORDS" | termux-notification --title "Adblock Database Updated!"  --id adblock-update
        echo "Adblock hosts updated on $(date +%F)" > $BUCKET
        UPDATED=true
        DONE
    else
        FAIL
        rm -f $HOSTSD/hosts.comm.tmp
        return 1
    fi
 }

apply () { 
    echo -ne "Updating user entries "
    if ! md5sum -c ${HOSTSV}/hosts.user_md5 &> /dev/null
        then UPDATED=true
        md5sum $HOSTSD/hosts.user > ${HOSTSV}/hosts.user_md5
        UPDATED
    else
        OK
    fi
    
    echo -en "Updating excludes "
    if ! md5sum -c ${HOSTSV}/hosts.excludes_md5 &> /dev/null
        then UPDATED=true
        md5sum $HOSTSD/hosts.excludes > ${HOSTSV}/hosts.excludes_md5
        UPDATED
    else
        OK
    fi
    
    echo -en "Rebuilding hosts file "
    if $UPDATED
        then
        cp -f $HOSTSD/hosts.comm $HOSTSD/hosts.final
        cat $HOSTSD/hosts.user >> $HOSTSD/hosts.final
        
        for EXCLUDE in $(cat $HOSTSD/hosts.excludes | sed 's/#.*//g')
            do
            sed -i "/$EXCLUDE/d" $HOSTSD/hosts.final
        done
        cat $HOSTSD/hosts.final > $SYS_HOSTS
        DONE
        report
        echo "Updating Adblock $(DONE)"
    else
        SKIP
    fi
}

report () {
    echo -e "Community update: $(grep -m 1 "^# Date:" $HOSTSD/hosts.comm | cut -d' ' -f3-5)"
    echo -e "Community entries:$(grep -m 1 "^# Number of unique domains" $HOSTSD/hosts.comm | cut -d':' -f2)"
    USER_REC=$(grep -c ^0 $HOSTSD/hosts.user)
    echo -e "User entries: $USER_REC"
}    

case $1 in
 -e | en*)
    enable_adblock
    ;;

 -d | di*)
    disable_adblock
    ;;

 -u | up*)
    is_enabled && check && download && apply
    ;;

 -a | ap*)
    is_enabled && apply
    ;;
 -r | re*)
    is_enabled && report
    ;;
 *)
    echo "Usage: $(basename $0) [-a|apply -u|update -e|enable -d|disable -r|report]"
    ;;
esac